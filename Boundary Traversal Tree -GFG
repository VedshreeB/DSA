class Solution {
public:
    void traverseLeft(Node* root,vector<int> &ans){
        if(root==NULL)return;
        
        //leaf node
        if(!root->left && !root->right)
            return;
            
        ans.push_back(root->data);
        if(root->left)
            traverseLeft(root->left,ans);
        else
            traverseLeft(root->right,ans);
    }

    void traverseLeaf(Node *root , vector<int> &ans){
        if(root==NULL)return;
        
        //leaf node
        if(!root->left && !root->right)
        {
            ans.push_back(root->data);
            return;
        }
        
        traverseLeaf(root->left,ans);
        traverseLeaf(root->right,ans);
    }
    
    void traverseRight(Node *root,vector<int> &ans){
            
            
         if(root==NULL)return;
        
        //leaf node
            if(!root->left && !root->right)
            {
                return;
            }
        
        if(root->right)
            traverseRight(root->right,ans);
        
        else
            traverseRight(root->left,ans);
            
        //wapas aayenge
         ans.push_back(root->data);
        
    }
    
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        if(root == NULL) return ans;
        
        ans.push_back(root->data);
        //left boundary
        traverseLeft(root->left,ans);
        
        //leaf node for left subtree
        traverseLeaf(root->left,ans);
        
        //for right subtree
        traverseLeaf(root->right,ans);
        
        
        traverseRight(root->right,ans);
        
        return ans;
    }
};
