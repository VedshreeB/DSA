class Solution{
    public:
    void max_heapify(vector<int> &v,int i, int size){
        int largest = i;
        int left = 2*i+1;
        int right = 2*i+2;
        
        if(left <size && v[left] > v[largest]) 
            largest = left;
        if(right < size && v[right] > v[largest])
            largest = right;
        
        if(largest != i){
            swap(v[largest],v[i]);
            max_heapify(v,largest,size);
        }
    }
    
    vector<int> mergeHeaps(vector<int> &a, vector<int> &b, int n, int m) {
        vector<int> ans;
        
        for(auto i: a)
            ans.push_back(i);
        for(auto i : b)
            ans.push_back(i);
            
        //build maxheap from ans
        n = n+m;
        for(int i=n/2-1 ; i>=0 ; i--){
            max_heapify(ans,i,n);
        }
        
        return ans;
    }
};
